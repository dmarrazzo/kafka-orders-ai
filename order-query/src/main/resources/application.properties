# http config to make it accessible from containers
%dev.quarkus.http.host=0.0.0.0
%dev.quarkus.http.port=8090

# devservices
quarkus.kafka.devservices.port=9092

# kafka streams
quarkus.kafka-streams.topics=orders
kafka.default.key.serde=org.apache.kafka.common.serialization.Serdes\$StringSerde
kafka.default.value.serde=org.apache.kafka.common.serialization.Serdes\$StringSerde
# pass-through options
kafka-streams.cache.max.bytes.buffering=10240
kafka-streams.commit.interval.ms=1000
kafka-streams.metadata.max.age.ms=500
kafka-streams.auto.offset.reset=earliest
kafka-streams.metrics.recording.level=DEBUG

%prod.kafka-streams.state.dir=/kstreams/state

# kafka consumer
kafkaconsumer.bootstrap-server=localhost:9092
kafkaconsumer.topic=orders

# OpenShift deployment #####################################

quarkus.kubernetes-client.trust-certs=true
# leaving the group blank make it inherit the active openshift project
quarkus.container-image.group=
quarkus.openshift.deployment-kind=Deployment
quarkus.openshift.part-of=kafka-orders-ai
quarkus.openshift.labels.app=order-query
quarkus.openshift.env.configmaps=kafka-orders-ai-config

# has to match Dockerfile user
quarkus.openshift.security-context.fs-group=1001000000

quarkus.openshift.mounts.kstreams-vol.path=/kstreams
quarkus.openshift.pvc-volumes."kstreams-vol".claim-name=order-query-pvc

## Expose
quarkus.openshift.route.expose=true
## Route TLS configuration:
quarkus.openshift.route.target-port=http
quarkus.openshift.route.tls.termination=edge
quarkus.openshift.route.tls.insecure-edge-termination-policy=None